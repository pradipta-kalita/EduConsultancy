/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pol.payment_service.schema.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CoursePurchasedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4721501149347824682L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CoursePurchasedEvent\",\"namespace\":\"com.pol.payment_service.schema.avro\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CoursePurchasedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CoursePurchasedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CoursePurchasedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CoursePurchasedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CoursePurchasedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CoursePurchasedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CoursePurchasedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CoursePurchasedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CoursePurchasedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence orderId;
  private java.lang.CharSequence userName;
  private java.lang.CharSequence amount;
  private java.lang.CharSequence currency;
  private java.lang.CharSequence product;
  private java.lang.CharSequence time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CoursePurchasedEvent() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param userName The new value for userName
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param product The new value for product
   * @param time The new value for time
   */
  public CoursePurchasedEvent(java.lang.CharSequence orderId, java.lang.CharSequence userName, java.lang.CharSequence amount, java.lang.CharSequence currency, java.lang.CharSequence product, java.lang.CharSequence time) {
    this.orderId = orderId;
    this.userName = userName;
    this.amount = amount;
    this.currency = currency;
    this.product = product;
    this.time = time;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return userName;
    case 2: return amount;
    case 3: return currency;
    case 4: return product;
    case 5: return time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: userName = (java.lang.CharSequence)value$; break;
    case 2: amount = (java.lang.CharSequence)value$; break;
    case 3: currency = (java.lang.CharSequence)value$; break;
    case 4: product = (java.lang.CharSequence)value$; break;
    case 5: time = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * @return The value of the 'userName' field.
   */
  public java.lang.CharSequence getUserName() {
    return userName;
  }


  /**
   * Sets the value of the 'userName' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.CharSequence getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public java.lang.CharSequence getProduct() {
    return product;
  }


  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.CharSequence value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.CharSequence getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Creates a new CoursePurchasedEvent RecordBuilder.
   * @return A new CoursePurchasedEvent RecordBuilder
   */
  public static com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder newBuilder() {
    return new com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder();
  }

  /**
   * Creates a new CoursePurchasedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CoursePurchasedEvent RecordBuilder
   */
  public static com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder newBuilder(com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder other) {
    if (other == null) {
      return new com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder();
    } else {
      return new com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder(other);
    }
  }

  /**
   * Creates a new CoursePurchasedEvent RecordBuilder by copying an existing CoursePurchasedEvent instance.
   * @param other The existing instance to copy.
   * @return A new CoursePurchasedEvent RecordBuilder
   */
  public static com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder newBuilder(com.pol.payment_service.schema.avro.CoursePurchasedEvent other) {
    if (other == null) {
      return new com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder();
    } else {
      return new com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CoursePurchasedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CoursePurchasedEvent>
    implements org.apache.avro.data.RecordBuilder<CoursePurchasedEvent> {

    private java.lang.CharSequence orderId;
    private java.lang.CharSequence userName;
    private java.lang.CharSequence amount;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence product;
    private java.lang.CharSequence time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.product)) {
        this.product = data().deepCopy(fields()[4].schema(), other.product);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.time)) {
        this.time = data().deepCopy(fields()[5].schema(), other.time);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing CoursePurchasedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pol.payment_service.schema.avro.CoursePurchasedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.product)) {
        this.product = data().deepCopy(fields()[4].schema(), other.product);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.time)) {
        this.time = data().deepCopy(fields()[5].schema(), other.time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userName' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return userName;
    }


    /**
      * Sets the value of the 'userName' field.
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.userName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userName' field.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.CharSequence getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder setAmount(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.currency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public java.lang.CharSequence getProduct() {
      return product;
    }


    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder setProduct(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.product = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder clearProduct() {
      product = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.pol.payment_service.schema.avro.CoursePurchasedEvent.Builder clearTime() {
      time = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CoursePurchasedEvent build() {
      try {
        CoursePurchasedEvent record = new CoursePurchasedEvent();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.userName = fieldSetFlags()[1] ? this.userName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.currency = fieldSetFlags()[3] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.product = fieldSetFlags()[4] ? this.product : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.time = fieldSetFlags()[5] ? this.time : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CoursePurchasedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CoursePurchasedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CoursePurchasedEvent>
    READER$ = (org.apache.avro.io.DatumReader<CoursePurchasedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderId);

    out.writeString(this.userName);

    out.writeString(this.amount);

    out.writeString(this.currency);

    out.writeString(this.product);

    out.writeString(this.time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);

      this.userName = in.readString(this.userName instanceof Utf8 ? (Utf8)this.userName : null);

      this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);

      this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);

      this.product = in.readString(this.product instanceof Utf8 ? (Utf8)this.product : null);

      this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);
          break;

        case 1:
          this.userName = in.readString(this.userName instanceof Utf8 ? (Utf8)this.userName : null);
          break;

        case 2:
          this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);
          break;

        case 3:
          this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          break;

        case 4:
          this.product = in.readString(this.product instanceof Utf8 ? (Utf8)this.product : null);
          break;

        case 5:
          this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










